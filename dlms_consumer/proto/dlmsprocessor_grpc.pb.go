// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: dlmsprocessor.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DLMSProcessor_GetOBIS_FullMethodName                 = "/dlmsprocessor.DLMSProcessor/GetOBIS"
	DLMSProcessor_GetBlockLoadProfile_FullMethodName     = "/dlmsprocessor.DLMSProcessor/GetBlockLoadProfile"
	DLMSProcessor_GetDailyLoadProfile_FullMethodName     = "/dlmsprocessor.DLMSProcessor/GetDailyLoadProfile"
	DLMSProcessor_GetBillingDataProfile_FullMethodName   = "/dlmsprocessor.DLMSProcessor/GetBillingDataProfile"
	DLMSProcessor_GetInstantaneousProfile_FullMethodName = "/dlmsprocessor.DLMSProcessor/GetInstantaneousProfile"
)

// DLMSProcessorClient is the client API for DLMSProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DLMSProcessorClient interface {
	GetOBIS(ctx context.Context, in *GetOBISRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetOBISResponse], error)
	GetBlockLoadProfile(ctx context.Context, in *GetBlockLoadProfileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetBlockLoadProfileResponse], error)
	GetDailyLoadProfile(ctx context.Context, in *GetDailyLoadProfileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDailyLoadProfileResponse], error)
	GetBillingDataProfile(ctx context.Context, in *GetBillingDataProfileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetBillingDataProfileResponse], error)
	GetInstantaneousProfile(ctx context.Context, in *GetInstantaneousProfileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetInstantaneousProfileResponse], error)
}

type dLMSProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewDLMSProcessorClient(cc grpc.ClientConnInterface) DLMSProcessorClient {
	return &dLMSProcessorClient{cc}
}

func (c *dLMSProcessorClient) GetOBIS(ctx context.Context, in *GetOBISRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetOBISResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DLMSProcessor_ServiceDesc.Streams[0], DLMSProcessor_GetOBIS_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetOBISRequest, GetOBISResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DLMSProcessor_GetOBISClient = grpc.ServerStreamingClient[GetOBISResponse]

func (c *dLMSProcessorClient) GetBlockLoadProfile(ctx context.Context, in *GetBlockLoadProfileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetBlockLoadProfileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DLMSProcessor_ServiceDesc.Streams[1], DLMSProcessor_GetBlockLoadProfile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetBlockLoadProfileRequest, GetBlockLoadProfileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DLMSProcessor_GetBlockLoadProfileClient = grpc.ServerStreamingClient[GetBlockLoadProfileResponse]

func (c *dLMSProcessorClient) GetDailyLoadProfile(ctx context.Context, in *GetDailyLoadProfileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetDailyLoadProfileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DLMSProcessor_ServiceDesc.Streams[2], DLMSProcessor_GetDailyLoadProfile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetDailyLoadProfileRequest, GetDailyLoadProfileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DLMSProcessor_GetDailyLoadProfileClient = grpc.ServerStreamingClient[GetDailyLoadProfileResponse]

func (c *dLMSProcessorClient) GetBillingDataProfile(ctx context.Context, in *GetBillingDataProfileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetBillingDataProfileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DLMSProcessor_ServiceDesc.Streams[3], DLMSProcessor_GetBillingDataProfile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetBillingDataProfileRequest, GetBillingDataProfileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DLMSProcessor_GetBillingDataProfileClient = grpc.ServerStreamingClient[GetBillingDataProfileResponse]

func (c *dLMSProcessorClient) GetInstantaneousProfile(ctx context.Context, in *GetInstantaneousProfileRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetInstantaneousProfileResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &DLMSProcessor_ServiceDesc.Streams[4], DLMSProcessor_GetInstantaneousProfile_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetInstantaneousProfileRequest, GetInstantaneousProfileResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DLMSProcessor_GetInstantaneousProfileClient = grpc.ServerStreamingClient[GetInstantaneousProfileResponse]

// DLMSProcessorServer is the server API for DLMSProcessor service.
// All implementations must embed UnimplementedDLMSProcessorServer
// for forward compatibility.
type DLMSProcessorServer interface {
	GetOBIS(*GetOBISRequest, grpc.ServerStreamingServer[GetOBISResponse]) error
	GetBlockLoadProfile(*GetBlockLoadProfileRequest, grpc.ServerStreamingServer[GetBlockLoadProfileResponse]) error
	GetDailyLoadProfile(*GetDailyLoadProfileRequest, grpc.ServerStreamingServer[GetDailyLoadProfileResponse]) error
	GetBillingDataProfile(*GetBillingDataProfileRequest, grpc.ServerStreamingServer[GetBillingDataProfileResponse]) error
	GetInstantaneousProfile(*GetInstantaneousProfileRequest, grpc.ServerStreamingServer[GetInstantaneousProfileResponse]) error
	mustEmbedUnimplementedDLMSProcessorServer()
}

// UnimplementedDLMSProcessorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDLMSProcessorServer struct{}

func (UnimplementedDLMSProcessorServer) GetOBIS(*GetOBISRequest, grpc.ServerStreamingServer[GetOBISResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetOBIS not implemented")
}
func (UnimplementedDLMSProcessorServer) GetBlockLoadProfile(*GetBlockLoadProfileRequest, grpc.ServerStreamingServer[GetBlockLoadProfileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetBlockLoadProfile not implemented")
}
func (UnimplementedDLMSProcessorServer) GetDailyLoadProfile(*GetDailyLoadProfileRequest, grpc.ServerStreamingServer[GetDailyLoadProfileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetDailyLoadProfile not implemented")
}
func (UnimplementedDLMSProcessorServer) GetBillingDataProfile(*GetBillingDataProfileRequest, grpc.ServerStreamingServer[GetBillingDataProfileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetBillingDataProfile not implemented")
}
func (UnimplementedDLMSProcessorServer) GetInstantaneousProfile(*GetInstantaneousProfileRequest, grpc.ServerStreamingServer[GetInstantaneousProfileResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GetInstantaneousProfile not implemented")
}
func (UnimplementedDLMSProcessorServer) mustEmbedUnimplementedDLMSProcessorServer() {}
func (UnimplementedDLMSProcessorServer) testEmbeddedByValue()                       {}

// UnsafeDLMSProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DLMSProcessorServer will
// result in compilation errors.
type UnsafeDLMSProcessorServer interface {
	mustEmbedUnimplementedDLMSProcessorServer()
}

func RegisterDLMSProcessorServer(s grpc.ServiceRegistrar, srv DLMSProcessorServer) {
	// If the following call pancis, it indicates UnimplementedDLMSProcessorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DLMSProcessor_ServiceDesc, srv)
}

func _DLMSProcessor_GetOBIS_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetOBISRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DLMSProcessorServer).GetOBIS(m, &grpc.GenericServerStream[GetOBISRequest, GetOBISResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DLMSProcessor_GetOBISServer = grpc.ServerStreamingServer[GetOBISResponse]

func _DLMSProcessor_GetBlockLoadProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlockLoadProfileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DLMSProcessorServer).GetBlockLoadProfile(m, &grpc.GenericServerStream[GetBlockLoadProfileRequest, GetBlockLoadProfileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DLMSProcessor_GetBlockLoadProfileServer = grpc.ServerStreamingServer[GetBlockLoadProfileResponse]

func _DLMSProcessor_GetDailyLoadProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetDailyLoadProfileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DLMSProcessorServer).GetDailyLoadProfile(m, &grpc.GenericServerStream[GetDailyLoadProfileRequest, GetDailyLoadProfileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DLMSProcessor_GetDailyLoadProfileServer = grpc.ServerStreamingServer[GetDailyLoadProfileResponse]

func _DLMSProcessor_GetBillingDataProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBillingDataProfileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DLMSProcessorServer).GetBillingDataProfile(m, &grpc.GenericServerStream[GetBillingDataProfileRequest, GetBillingDataProfileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DLMSProcessor_GetBillingDataProfileServer = grpc.ServerStreamingServer[GetBillingDataProfileResponse]

func _DLMSProcessor_GetInstantaneousProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetInstantaneousProfileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DLMSProcessorServer).GetInstantaneousProfile(m, &grpc.GenericServerStream[GetInstantaneousProfileRequest, GetInstantaneousProfileResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type DLMSProcessor_GetInstantaneousProfileServer = grpc.ServerStreamingServer[GetInstantaneousProfileResponse]

// DLMSProcessor_ServiceDesc is the grpc.ServiceDesc for DLMSProcessor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DLMSProcessor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dlmsprocessor.DLMSProcessor",
	HandlerType: (*DLMSProcessorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetOBIS",
			Handler:       _DLMSProcessor_GetOBIS_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBlockLoadProfile",
			Handler:       _DLMSProcessor_GetBlockLoadProfile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetDailyLoadProfile",
			Handler:       _DLMSProcessor_GetDailyLoadProfile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetBillingDataProfile",
			Handler:       _DLMSProcessor_GetBillingDataProfile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetInstantaneousProfile",
			Handler:       _DLMSProcessor_GetInstantaneousProfile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "dlmsprocessor.proto",
}
