// @ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 6.31.0
 * source: dlmsprocessor.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "grpc-web";
import * as grpc_web_1 from "grpc-web";
export class GetOBISRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        meter?: Meter[];
        obis?: string;
        retries?: number;
        retryDelay?: number;
        connectionTimeout?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("meter" in data && data.meter != undefined) {
                this.meter = data.meter;
            }
            if ("obis" in data && data.obis != undefined) {
                this.obis = data.obis;
            }
            if ("retries" in data && data.retries != undefined) {
                this.retries = data.retries;
            }
            if ("retryDelay" in data && data.retryDelay != undefined) {
                this.retryDelay = data.retryDelay;
            }
            if ("connectionTimeout" in data && data.connectionTimeout != undefined) {
                this.connectionTimeout = data.connectionTimeout;
            }
        }
    }
    get meter() {
        return pb_1.Message.getRepeatedWrapperField(this, Meter, 1) as Meter[];
    }
    set meter(value: Meter[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get obis() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set obis(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get retries() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set retries(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get retryDelay() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set retryDelay(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get connectionTimeout() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set connectionTimeout(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        meter?: ReturnType<typeof Meter.prototype.toObject>[];
        obis?: string;
        retries?: number;
        retryDelay?: number;
        connectionTimeout?: number;
    }): GetOBISRequest {
        const message = new GetOBISRequest({});
        if (data.meter != null) {
            message.meter = data.meter.map(item => Meter.fromObject(item));
        }
        if (data.obis != null) {
            message.obis = data.obis;
        }
        if (data.retries != null) {
            message.retries = data.retries;
        }
        if (data.retryDelay != null) {
            message.retryDelay = data.retryDelay;
        }
        if (data.connectionTimeout != null) {
            message.connectionTimeout = data.connectionTimeout;
        }
        return message;
    }
    toObject() {
        const data: {
            meter?: ReturnType<typeof Meter.prototype.toObject>[];
            obis?: string;
            retries?: number;
            retryDelay?: number;
            connectionTimeout?: number;
        } = {};
        if (this.meter != null) {
            data.meter = this.meter.map((item: Meter) => item.toObject());
        }
        if (this.obis != null) {
            data.obis = this.obis;
        }
        if (this.retries != null) {
            data.retries = this.retries;
        }
        if (this.retryDelay != null) {
            data.retryDelay = this.retryDelay;
        }
        if (this.connectionTimeout != null) {
            data.connectionTimeout = this.connectionTimeout;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.meter.length)
            writer.writeRepeatedMessage(1, this.meter, (item: Meter) => item.serialize(writer));
        if (this.obis.length)
            writer.writeString(2, this.obis);
        if (this.retries != 0)
            writer.writeInt32(4, this.retries);
        if (this.retryDelay != 0)
            writer.writeInt32(5, this.retryDelay);
        if (this.connectionTimeout != 0)
            writer.writeInt32(6, this.connectionTimeout);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetOBISRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetOBISRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.meter, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Meter.deserialize(reader), Meter));
                    break;
                case 2:
                    message.obis = reader.readString();
                    break;
                case 4:
                    message.retries = reader.readInt32();
                    break;
                case 5:
                    message.retryDelay = reader.readInt32();
                    break;
                case 6:
                    message.connectionTimeout = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetOBISRequest {
        return GetOBISRequest.deserialize(bytes);
    }
}
export class Meter extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ip?: string;
        port?: number;
        obis?: string;
        systemTitle?: string;
        authPassword?: string;
        authKey?: string;
        blockCipherKey?: string;
        clientAddress?: string;
        serverAddress?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ip" in data && data.ip != undefined) {
                this.ip = data.ip;
            }
            if ("port" in data && data.port != undefined) {
                this.port = data.port;
            }
            if ("obis" in data && data.obis != undefined) {
                this.obis = data.obis;
            }
            if ("systemTitle" in data && data.systemTitle != undefined) {
                this.systemTitle = data.systemTitle;
            }
            if ("authPassword" in data && data.authPassword != undefined) {
                this.authPassword = data.authPassword;
            }
            if ("authKey" in data && data.authKey != undefined) {
                this.authKey = data.authKey;
            }
            if ("blockCipherKey" in data && data.blockCipherKey != undefined) {
                this.blockCipherKey = data.blockCipherKey;
            }
            if ("clientAddress" in data && data.clientAddress != undefined) {
                this.clientAddress = data.clientAddress;
            }
            if ("serverAddress" in data && data.serverAddress != undefined) {
                this.serverAddress = data.serverAddress;
            }
        }
    }
    get ip() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set ip(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get port() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set port(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get obis() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set obis(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get systemTitle() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set systemTitle(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get authPassword() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set authPassword(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get authKey() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set authKey(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get blockCipherKey() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set blockCipherKey(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get clientAddress() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set clientAddress(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get serverAddress() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set serverAddress(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
        ip?: string;
        port?: number;
        obis?: string;
        systemTitle?: string;
        authPassword?: string;
        authKey?: string;
        blockCipherKey?: string;
        clientAddress?: string;
        serverAddress?: string;
    }): Meter {
        const message = new Meter({});
        if (data.ip != null) {
            message.ip = data.ip;
        }
        if (data.port != null) {
            message.port = data.port;
        }
        if (data.obis != null) {
            message.obis = data.obis;
        }
        if (data.systemTitle != null) {
            message.systemTitle = data.systemTitle;
        }
        if (data.authPassword != null) {
            message.authPassword = data.authPassword;
        }
        if (data.authKey != null) {
            message.authKey = data.authKey;
        }
        if (data.blockCipherKey != null) {
            message.blockCipherKey = data.blockCipherKey;
        }
        if (data.clientAddress != null) {
            message.clientAddress = data.clientAddress;
        }
        if (data.serverAddress != null) {
            message.serverAddress = data.serverAddress;
        }
        return message;
    }
    toObject() {
        const data: {
            ip?: string;
            port?: number;
            obis?: string;
            systemTitle?: string;
            authPassword?: string;
            authKey?: string;
            blockCipherKey?: string;
            clientAddress?: string;
            serverAddress?: string;
        } = {};
        if (this.ip != null) {
            data.ip = this.ip;
        }
        if (this.port != null) {
            data.port = this.port;
        }
        if (this.obis != null) {
            data.obis = this.obis;
        }
        if (this.systemTitle != null) {
            data.systemTitle = this.systemTitle;
        }
        if (this.authPassword != null) {
            data.authPassword = this.authPassword;
        }
        if (this.authKey != null) {
            data.authKey = this.authKey;
        }
        if (this.blockCipherKey != null) {
            data.blockCipherKey = this.blockCipherKey;
        }
        if (this.clientAddress != null) {
            data.clientAddress = this.clientAddress;
        }
        if (this.serverAddress != null) {
            data.serverAddress = this.serverAddress;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ip.length)
            writer.writeString(1, this.ip);
        if (this.port != 0)
            writer.writeInt32(2, this.port);
        if (this.obis.length)
            writer.writeString(3, this.obis);
        if (this.systemTitle.length)
            writer.writeString(4, this.systemTitle);
        if (this.authPassword.length)
            writer.writeString(5, this.authPassword);
        if (this.authKey.length)
            writer.writeString(6, this.authKey);
        if (this.blockCipherKey.length)
            writer.writeString(7, this.blockCipherKey);
        if (this.clientAddress.length)
            writer.writeString(8, this.clientAddress);
        if (this.serverAddress.length)
            writer.writeString(9, this.serverAddress);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Meter {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Meter();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ip = reader.readString();
                    break;
                case 2:
                    message.port = reader.readInt32();
                    break;
                case 3:
                    message.obis = reader.readString();
                    break;
                case 4:
                    message.systemTitle = reader.readString();
                    break;
                case 5:
                    message.authPassword = reader.readString();
                    break;
                case 6:
                    message.authKey = reader.readString();
                    break;
                case 7:
                    message.blockCipherKey = reader.readString();
                    break;
                case 8:
                    message.clientAddress = reader.readString();
                    break;
                case 9:
                    message.serverAddress = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Meter {
        return Meter.deserialize(bytes);
    }
}
export class GetOBISResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        value?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        value?: string;
    }): GetOBISResponse {
        const message = new GetOBISResponse({});
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            value?: string;
        } = {};
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.value.length)
            writer.writeString(1, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetOBISResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetOBISResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetOBISResponse {
        return GetOBISResponse.deserialize(bytes);
    }
}
export class GetBlockLoadProfileRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        meter?: Meter[];
        retries?: number;
        retryDelay?: number;
        connectionTimeout?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("meter" in data && data.meter != undefined) {
                this.meter = data.meter;
            }
            if ("retries" in data && data.retries != undefined) {
                this.retries = data.retries;
            }
            if ("retryDelay" in data && data.retryDelay != undefined) {
                this.retryDelay = data.retryDelay;
            }
            if ("connectionTimeout" in data && data.connectionTimeout != undefined) {
                this.connectionTimeout = data.connectionTimeout;
            }
        }
    }
    get meter() {
        return pb_1.Message.getRepeatedWrapperField(this, Meter, 1) as Meter[];
    }
    set meter(value: Meter[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get retries() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set retries(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get retryDelay() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set retryDelay(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get connectionTimeout() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set connectionTimeout(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        meter?: ReturnType<typeof Meter.prototype.toObject>[];
        retries?: number;
        retryDelay?: number;
        connectionTimeout?: number;
    }): GetBlockLoadProfileRequest {
        const message = new GetBlockLoadProfileRequest({});
        if (data.meter != null) {
            message.meter = data.meter.map(item => Meter.fromObject(item));
        }
        if (data.retries != null) {
            message.retries = data.retries;
        }
        if (data.retryDelay != null) {
            message.retryDelay = data.retryDelay;
        }
        if (data.connectionTimeout != null) {
            message.connectionTimeout = data.connectionTimeout;
        }
        return message;
    }
    toObject() {
        const data: {
            meter?: ReturnType<typeof Meter.prototype.toObject>[];
            retries?: number;
            retryDelay?: number;
            connectionTimeout?: number;
        } = {};
        if (this.meter != null) {
            data.meter = this.meter.map((item: Meter) => item.toObject());
        }
        if (this.retries != null) {
            data.retries = this.retries;
        }
        if (this.retryDelay != null) {
            data.retryDelay = this.retryDelay;
        }
        if (this.connectionTimeout != null) {
            data.connectionTimeout = this.connectionTimeout;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.meter.length)
            writer.writeRepeatedMessage(1, this.meter, (item: Meter) => item.serialize(writer));
        if (this.retries != 0)
            writer.writeInt32(2, this.retries);
        if (this.retryDelay != 0)
            writer.writeInt32(3, this.retryDelay);
        if (this.connectionTimeout != 0)
            writer.writeInt32(4, this.connectionTimeout);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockLoadProfileRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockLoadProfileRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.meter, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Meter.deserialize(reader), Meter));
                    break;
                case 2:
                    message.retries = reader.readInt32();
                    break;
                case 3:
                    message.retryDelay = reader.readInt32();
                    break;
                case 4:
                    message.connectionTimeout = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetBlockLoadProfileRequest {
        return GetBlockLoadProfileRequest.deserialize(bytes);
    }
}
export class GetBlockLoadProfileResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        profile?: BlockLoadProfile;
        meterIp?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("profile" in data && data.profile != undefined) {
                this.profile = data.profile;
            }
            if ("meterIp" in data && data.meterIp != undefined) {
                this.meterIp = data.meterIp;
            }
        }
    }
    get profile() {
        return pb_1.Message.getWrapperField(this, BlockLoadProfile, 1) as BlockLoadProfile;
    }
    set profile(value: BlockLoadProfile) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_profile() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get meterIp() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set meterIp(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        profile?: ReturnType<typeof BlockLoadProfile.prototype.toObject>;
        meterIp?: string;
    }): GetBlockLoadProfileResponse {
        const message = new GetBlockLoadProfileResponse({});
        if (data.profile != null) {
            message.profile = BlockLoadProfile.fromObject(data.profile);
        }
        if (data.meterIp != null) {
            message.meterIp = data.meterIp;
        }
        return message;
    }
    toObject() {
        const data: {
            profile?: ReturnType<typeof BlockLoadProfile.prototype.toObject>;
            meterIp?: string;
        } = {};
        if (this.profile != null) {
            data.profile = this.profile.toObject();
        }
        if (this.meterIp != null) {
            data.meterIp = this.meterIp;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_profile)
            writer.writeMessage(1, this.profile, () => this.profile.serialize(writer));
        if (this.meterIp.length)
            writer.writeString(2, this.meterIp);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBlockLoadProfileResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBlockLoadProfileResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.profile, () => message.profile = BlockLoadProfile.deserialize(reader));
                    break;
                case 2:
                    message.meterIp = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetBlockLoadProfileResponse {
        return GetBlockLoadProfileResponse.deserialize(bytes);
    }
}
export class BlockLoadProfile extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        dateTime?: string;
        averageVoltage?: number;
        blockEnergyWhImport?: number;
        blockEnergyVahImport?: number;
        blockEnergyWhExport?: number;
        blockEnergyVahExport?: number;
        averageCurrent?: number;
        meterHealthIndicator?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("dateTime" in data && data.dateTime != undefined) {
                this.dateTime = data.dateTime;
            }
            if ("averageVoltage" in data && data.averageVoltage != undefined) {
                this.averageVoltage = data.averageVoltage;
            }
            if ("blockEnergyWhImport" in data && data.blockEnergyWhImport != undefined) {
                this.blockEnergyWhImport = data.blockEnergyWhImport;
            }
            if ("blockEnergyVahImport" in data && data.blockEnergyVahImport != undefined) {
                this.blockEnergyVahImport = data.blockEnergyVahImport;
            }
            if ("blockEnergyWhExport" in data && data.blockEnergyWhExport != undefined) {
                this.blockEnergyWhExport = data.blockEnergyWhExport;
            }
            if ("blockEnergyVahExport" in data && data.blockEnergyVahExport != undefined) {
                this.blockEnergyVahExport = data.blockEnergyVahExport;
            }
            if ("averageCurrent" in data && data.averageCurrent != undefined) {
                this.averageCurrent = data.averageCurrent;
            }
            if ("meterHealthIndicator" in data && data.meterHealthIndicator != undefined) {
                this.meterHealthIndicator = data.meterHealthIndicator;
            }
        }
    }
    get dateTime() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set dateTime(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get averageVoltage() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set averageVoltage(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get blockEnergyWhImport() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set blockEnergyWhImport(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get blockEnergyVahImport() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set blockEnergyVahImport(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get blockEnergyWhExport() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set blockEnergyWhExport(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get blockEnergyVahExport() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set blockEnergyVahExport(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get averageCurrent() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set averageCurrent(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get meterHealthIndicator() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set meterHealthIndicator(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        dateTime?: string;
        averageVoltage?: number;
        blockEnergyWhImport?: number;
        blockEnergyVahImport?: number;
        blockEnergyWhExport?: number;
        blockEnergyVahExport?: number;
        averageCurrent?: number;
        meterHealthIndicator?: number;
    }): BlockLoadProfile {
        const message = new BlockLoadProfile({});
        if (data.dateTime != null) {
            message.dateTime = data.dateTime;
        }
        if (data.averageVoltage != null) {
            message.averageVoltage = data.averageVoltage;
        }
        if (data.blockEnergyWhImport != null) {
            message.blockEnergyWhImport = data.blockEnergyWhImport;
        }
        if (data.blockEnergyVahImport != null) {
            message.blockEnergyVahImport = data.blockEnergyVahImport;
        }
        if (data.blockEnergyWhExport != null) {
            message.blockEnergyWhExport = data.blockEnergyWhExport;
        }
        if (data.blockEnergyVahExport != null) {
            message.blockEnergyVahExport = data.blockEnergyVahExport;
        }
        if (data.averageCurrent != null) {
            message.averageCurrent = data.averageCurrent;
        }
        if (data.meterHealthIndicator != null) {
            message.meterHealthIndicator = data.meterHealthIndicator;
        }
        return message;
    }
    toObject() {
        const data: {
            dateTime?: string;
            averageVoltage?: number;
            blockEnergyWhImport?: number;
            blockEnergyVahImport?: number;
            blockEnergyWhExport?: number;
            blockEnergyVahExport?: number;
            averageCurrent?: number;
            meterHealthIndicator?: number;
        } = {};
        if (this.dateTime != null) {
            data.dateTime = this.dateTime;
        }
        if (this.averageVoltage != null) {
            data.averageVoltage = this.averageVoltage;
        }
        if (this.blockEnergyWhImport != null) {
            data.blockEnergyWhImport = this.blockEnergyWhImport;
        }
        if (this.blockEnergyVahImport != null) {
            data.blockEnergyVahImport = this.blockEnergyVahImport;
        }
        if (this.blockEnergyWhExport != null) {
            data.blockEnergyWhExport = this.blockEnergyWhExport;
        }
        if (this.blockEnergyVahExport != null) {
            data.blockEnergyVahExport = this.blockEnergyVahExport;
        }
        if (this.averageCurrent != null) {
            data.averageCurrent = this.averageCurrent;
        }
        if (this.meterHealthIndicator != null) {
            data.meterHealthIndicator = this.meterHealthIndicator;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.dateTime.length)
            writer.writeString(1, this.dateTime);
        if (this.averageVoltage != 0)
            writer.writeDouble(2, this.averageVoltage);
        if (this.blockEnergyWhImport != 0)
            writer.writeDouble(3, this.blockEnergyWhImport);
        if (this.blockEnergyVahImport != 0)
            writer.writeDouble(4, this.blockEnergyVahImport);
        if (this.blockEnergyWhExport != 0)
            writer.writeDouble(5, this.blockEnergyWhExport);
        if (this.blockEnergyVahExport != 0)
            writer.writeDouble(6, this.blockEnergyVahExport);
        if (this.averageCurrent != 0)
            writer.writeDouble(7, this.averageCurrent);
        if (this.meterHealthIndicator != 0)
            writer.writeUint32(8, this.meterHealthIndicator);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlockLoadProfile {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlockLoadProfile();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.dateTime = reader.readString();
                    break;
                case 2:
                    message.averageVoltage = reader.readDouble();
                    break;
                case 3:
                    message.blockEnergyWhImport = reader.readDouble();
                    break;
                case 4:
                    message.blockEnergyVahImport = reader.readDouble();
                    break;
                case 5:
                    message.blockEnergyWhExport = reader.readDouble();
                    break;
                case 6:
                    message.blockEnergyVahExport = reader.readDouble();
                    break;
                case 7:
                    message.averageCurrent = reader.readDouble();
                    break;
                case 8:
                    message.meterHealthIndicator = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BlockLoadProfile {
        return BlockLoadProfile.deserialize(bytes);
    }
}
export class GetDailyLoadProfileRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        meter?: Meter[];
        retries?: number;
        retryDelay?: number;
        connectionTimeout?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("meter" in data && data.meter != undefined) {
                this.meter = data.meter;
            }
            if ("retries" in data && data.retries != undefined) {
                this.retries = data.retries;
            }
            if ("retryDelay" in data && data.retryDelay != undefined) {
                this.retryDelay = data.retryDelay;
            }
            if ("connectionTimeout" in data && data.connectionTimeout != undefined) {
                this.connectionTimeout = data.connectionTimeout;
            }
        }
    }
    get meter() {
        return pb_1.Message.getRepeatedWrapperField(this, Meter, 1) as Meter[];
    }
    set meter(value: Meter[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get retries() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set retries(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get retryDelay() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set retryDelay(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get connectionTimeout() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set connectionTimeout(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        meter?: ReturnType<typeof Meter.prototype.toObject>[];
        retries?: number;
        retryDelay?: number;
        connectionTimeout?: number;
    }): GetDailyLoadProfileRequest {
        const message = new GetDailyLoadProfileRequest({});
        if (data.meter != null) {
            message.meter = data.meter.map(item => Meter.fromObject(item));
        }
        if (data.retries != null) {
            message.retries = data.retries;
        }
        if (data.retryDelay != null) {
            message.retryDelay = data.retryDelay;
        }
        if (data.connectionTimeout != null) {
            message.connectionTimeout = data.connectionTimeout;
        }
        return message;
    }
    toObject() {
        const data: {
            meter?: ReturnType<typeof Meter.prototype.toObject>[];
            retries?: number;
            retryDelay?: number;
            connectionTimeout?: number;
        } = {};
        if (this.meter != null) {
            data.meter = this.meter.map((item: Meter) => item.toObject());
        }
        if (this.retries != null) {
            data.retries = this.retries;
        }
        if (this.retryDelay != null) {
            data.retryDelay = this.retryDelay;
        }
        if (this.connectionTimeout != null) {
            data.connectionTimeout = this.connectionTimeout;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.meter.length)
            writer.writeRepeatedMessage(1, this.meter, (item: Meter) => item.serialize(writer));
        if (this.retries != 0)
            writer.writeInt32(2, this.retries);
        if (this.retryDelay != 0)
            writer.writeInt32(3, this.retryDelay);
        if (this.connectionTimeout != 0)
            writer.writeInt32(4, this.connectionTimeout);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDailyLoadProfileRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDailyLoadProfileRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.meter, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Meter.deserialize(reader), Meter));
                    break;
                case 2:
                    message.retries = reader.readInt32();
                    break;
                case 3:
                    message.retryDelay = reader.readInt32();
                    break;
                case 4:
                    message.connectionTimeout = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetDailyLoadProfileRequest {
        return GetDailyLoadProfileRequest.deserialize(bytes);
    }
}
export class GetDailyLoadProfileResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        profile?: DailyLoadProfile;
        meterIp?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("profile" in data && data.profile != undefined) {
                this.profile = data.profile;
            }
            if ("meterIp" in data && data.meterIp != undefined) {
                this.meterIp = data.meterIp;
            }
        }
    }
    get profile() {
        return pb_1.Message.getWrapperField(this, DailyLoadProfile, 1) as DailyLoadProfile;
    }
    set profile(value: DailyLoadProfile) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_profile() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get meterIp() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set meterIp(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        profile?: ReturnType<typeof DailyLoadProfile.prototype.toObject>;
        meterIp?: string;
    }): GetDailyLoadProfileResponse {
        const message = new GetDailyLoadProfileResponse({});
        if (data.profile != null) {
            message.profile = DailyLoadProfile.fromObject(data.profile);
        }
        if (data.meterIp != null) {
            message.meterIp = data.meterIp;
        }
        return message;
    }
    toObject() {
        const data: {
            profile?: ReturnType<typeof DailyLoadProfile.prototype.toObject>;
            meterIp?: string;
        } = {};
        if (this.profile != null) {
            data.profile = this.profile.toObject();
        }
        if (this.meterIp != null) {
            data.meterIp = this.meterIp;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_profile)
            writer.writeMessage(1, this.profile, () => this.profile.serialize(writer));
        if (this.meterIp.length)
            writer.writeString(2, this.meterIp);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetDailyLoadProfileResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetDailyLoadProfileResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.profile, () => message.profile = DailyLoadProfile.deserialize(reader));
                    break;
                case 2:
                    message.meterIp = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetDailyLoadProfileResponse {
        return GetDailyLoadProfileResponse.deserialize(bytes);
    }
}
export class DailyLoadProfile extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        dateTime?: string;
        cumulativeEnergyWhExport?: number;
        cumulativeEnergyVahExport?: number;
        cumulativeEnergyWhImport?: number;
        cumulativeEnergyVahImport?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("dateTime" in data && data.dateTime != undefined) {
                this.dateTime = data.dateTime;
            }
            if ("cumulativeEnergyWhExport" in data && data.cumulativeEnergyWhExport != undefined) {
                this.cumulativeEnergyWhExport = data.cumulativeEnergyWhExport;
            }
            if ("cumulativeEnergyVahExport" in data && data.cumulativeEnergyVahExport != undefined) {
                this.cumulativeEnergyVahExport = data.cumulativeEnergyVahExport;
            }
            if ("cumulativeEnergyWhImport" in data && data.cumulativeEnergyWhImport != undefined) {
                this.cumulativeEnergyWhImport = data.cumulativeEnergyWhImport;
            }
            if ("cumulativeEnergyVahImport" in data && data.cumulativeEnergyVahImport != undefined) {
                this.cumulativeEnergyVahImport = data.cumulativeEnergyVahImport;
            }
        }
    }
    get dateTime() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set dateTime(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get cumulativeEnergyWhExport() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set cumulativeEnergyWhExport(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get cumulativeEnergyVahExport() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set cumulativeEnergyVahExport(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get cumulativeEnergyWhImport() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set cumulativeEnergyWhImport(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get cumulativeEnergyVahImport() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set cumulativeEnergyVahImport(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        dateTime?: string;
        cumulativeEnergyWhExport?: number;
        cumulativeEnergyVahExport?: number;
        cumulativeEnergyWhImport?: number;
        cumulativeEnergyVahImport?: number;
    }): DailyLoadProfile {
        const message = new DailyLoadProfile({});
        if (data.dateTime != null) {
            message.dateTime = data.dateTime;
        }
        if (data.cumulativeEnergyWhExport != null) {
            message.cumulativeEnergyWhExport = data.cumulativeEnergyWhExport;
        }
        if (data.cumulativeEnergyVahExport != null) {
            message.cumulativeEnergyVahExport = data.cumulativeEnergyVahExport;
        }
        if (data.cumulativeEnergyWhImport != null) {
            message.cumulativeEnergyWhImport = data.cumulativeEnergyWhImport;
        }
        if (data.cumulativeEnergyVahImport != null) {
            message.cumulativeEnergyVahImport = data.cumulativeEnergyVahImport;
        }
        return message;
    }
    toObject() {
        const data: {
            dateTime?: string;
            cumulativeEnergyWhExport?: number;
            cumulativeEnergyVahExport?: number;
            cumulativeEnergyWhImport?: number;
            cumulativeEnergyVahImport?: number;
        } = {};
        if (this.dateTime != null) {
            data.dateTime = this.dateTime;
        }
        if (this.cumulativeEnergyWhExport != null) {
            data.cumulativeEnergyWhExport = this.cumulativeEnergyWhExport;
        }
        if (this.cumulativeEnergyVahExport != null) {
            data.cumulativeEnergyVahExport = this.cumulativeEnergyVahExport;
        }
        if (this.cumulativeEnergyWhImport != null) {
            data.cumulativeEnergyWhImport = this.cumulativeEnergyWhImport;
        }
        if (this.cumulativeEnergyVahImport != null) {
            data.cumulativeEnergyVahImport = this.cumulativeEnergyVahImport;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.dateTime.length)
            writer.writeString(1, this.dateTime);
        if (this.cumulativeEnergyWhExport != 0)
            writer.writeDouble(2, this.cumulativeEnergyWhExport);
        if (this.cumulativeEnergyVahExport != 0)
            writer.writeDouble(3, this.cumulativeEnergyVahExport);
        if (this.cumulativeEnergyWhImport != 0)
            writer.writeDouble(4, this.cumulativeEnergyWhImport);
        if (this.cumulativeEnergyVahImport != 0)
            writer.writeDouble(5, this.cumulativeEnergyVahImport);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DailyLoadProfile {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DailyLoadProfile();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.dateTime = reader.readString();
                    break;
                case 2:
                    message.cumulativeEnergyWhExport = reader.readDouble();
                    break;
                case 3:
                    message.cumulativeEnergyVahExport = reader.readDouble();
                    break;
                case 4:
                    message.cumulativeEnergyWhImport = reader.readDouble();
                    break;
                case 5:
                    message.cumulativeEnergyVahImport = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DailyLoadProfile {
        return DailyLoadProfile.deserialize(bytes);
    }
}
export class GetBillingDataProfileRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        meter?: Meter[];
        retries?: number;
        retryDelay?: number;
        connectionTimeout?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("meter" in data && data.meter != undefined) {
                this.meter = data.meter;
            }
            if ("retries" in data && data.retries != undefined) {
                this.retries = data.retries;
            }
            if ("retryDelay" in data && data.retryDelay != undefined) {
                this.retryDelay = data.retryDelay;
            }
            if ("connectionTimeout" in data && data.connectionTimeout != undefined) {
                this.connectionTimeout = data.connectionTimeout;
            }
        }
    }
    get meter() {
        return pb_1.Message.getRepeatedWrapperField(this, Meter, 1) as Meter[];
    }
    set meter(value: Meter[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get retries() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set retries(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get retryDelay() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set retryDelay(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get connectionTimeout() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set connectionTimeout(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        meter?: ReturnType<typeof Meter.prototype.toObject>[];
        retries?: number;
        retryDelay?: number;
        connectionTimeout?: number;
    }): GetBillingDataProfileRequest {
        const message = new GetBillingDataProfileRequest({});
        if (data.meter != null) {
            message.meter = data.meter.map(item => Meter.fromObject(item));
        }
        if (data.retries != null) {
            message.retries = data.retries;
        }
        if (data.retryDelay != null) {
            message.retryDelay = data.retryDelay;
        }
        if (data.connectionTimeout != null) {
            message.connectionTimeout = data.connectionTimeout;
        }
        return message;
    }
    toObject() {
        const data: {
            meter?: ReturnType<typeof Meter.prototype.toObject>[];
            retries?: number;
            retryDelay?: number;
            connectionTimeout?: number;
        } = {};
        if (this.meter != null) {
            data.meter = this.meter.map((item: Meter) => item.toObject());
        }
        if (this.retries != null) {
            data.retries = this.retries;
        }
        if (this.retryDelay != null) {
            data.retryDelay = this.retryDelay;
        }
        if (this.connectionTimeout != null) {
            data.connectionTimeout = this.connectionTimeout;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.meter.length)
            writer.writeRepeatedMessage(1, this.meter, (item: Meter) => item.serialize(writer));
        if (this.retries != 0)
            writer.writeInt32(2, this.retries);
        if (this.retryDelay != 0)
            writer.writeInt32(3, this.retryDelay);
        if (this.connectionTimeout != 0)
            writer.writeInt32(4, this.connectionTimeout);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBillingDataProfileRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBillingDataProfileRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.meter, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Meter.deserialize(reader), Meter));
                    break;
                case 2:
                    message.retries = reader.readInt32();
                    break;
                case 3:
                    message.retryDelay = reader.readInt32();
                    break;
                case 4:
                    message.connectionTimeout = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetBillingDataProfileRequest {
        return GetBillingDataProfileRequest.deserialize(bytes);
    }
}
export class GetBillingDataProfileResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        profile?: BillingDataProfile;
        meterIp?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("profile" in data && data.profile != undefined) {
                this.profile = data.profile;
            }
            if ("meterIp" in data && data.meterIp != undefined) {
                this.meterIp = data.meterIp;
            }
        }
    }
    get profile() {
        return pb_1.Message.getWrapperField(this, BillingDataProfile, 1) as BillingDataProfile;
    }
    set profile(value: BillingDataProfile) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_profile() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get meterIp() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set meterIp(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        profile?: ReturnType<typeof BillingDataProfile.prototype.toObject>;
        meterIp?: string;
    }): GetBillingDataProfileResponse {
        const message = new GetBillingDataProfileResponse({});
        if (data.profile != null) {
            message.profile = BillingDataProfile.fromObject(data.profile);
        }
        if (data.meterIp != null) {
            message.meterIp = data.meterIp;
        }
        return message;
    }
    toObject() {
        const data: {
            profile?: ReturnType<typeof BillingDataProfile.prototype.toObject>;
            meterIp?: string;
        } = {};
        if (this.profile != null) {
            data.profile = this.profile.toObject();
        }
        if (this.meterIp != null) {
            data.meterIp = this.meterIp;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_profile)
            writer.writeMessage(1, this.profile, () => this.profile.serialize(writer));
        if (this.meterIp.length)
            writer.writeString(2, this.meterIp);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetBillingDataProfileResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetBillingDataProfileResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.profile, () => message.profile = BillingDataProfile.deserialize(reader));
                    break;
                case 2:
                    message.meterIp = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetBillingDataProfileResponse {
        return GetBillingDataProfileResponse.deserialize(bytes);
    }
}
export class BillingDataProfile extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        billingDate?: string;
        averagePfForBillingPeriod?: number;
        cumEnergyWhImport?: number;
        cumEnergyWhTz1?: number;
        cumEnergyWhTz2?: number;
        cumEnergyWhTz3?: number;
        cumEnergyWhTz4?: number;
        cumEnergyVahImport?: number;
        cumEnergyVahTz1?: number;
        cumEnergyVahTz2?: number;
        cumEnergyVahTz3?: number;
        cumEnergyVahTz4?: number;
        mdw?: number;
        mdwDateTime?: string;
        mdva?: number;
        mdvaDateTime?: string;
        billingPowerOnDuration?: number;
        cumEnergyWh?: number;
        cumEnergyVah?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("billingDate" in data && data.billingDate != undefined) {
                this.billingDate = data.billingDate;
            }
            if ("averagePfForBillingPeriod" in data && data.averagePfForBillingPeriod != undefined) {
                this.averagePfForBillingPeriod = data.averagePfForBillingPeriod;
            }
            if ("cumEnergyWhImport" in data && data.cumEnergyWhImport != undefined) {
                this.cumEnergyWhImport = data.cumEnergyWhImport;
            }
            if ("cumEnergyWhTz1" in data && data.cumEnergyWhTz1 != undefined) {
                this.cumEnergyWhTz1 = data.cumEnergyWhTz1;
            }
            if ("cumEnergyWhTz2" in data && data.cumEnergyWhTz2 != undefined) {
                this.cumEnergyWhTz2 = data.cumEnergyWhTz2;
            }
            if ("cumEnergyWhTz3" in data && data.cumEnergyWhTz3 != undefined) {
                this.cumEnergyWhTz3 = data.cumEnergyWhTz3;
            }
            if ("cumEnergyWhTz4" in data && data.cumEnergyWhTz4 != undefined) {
                this.cumEnergyWhTz4 = data.cumEnergyWhTz4;
            }
            if ("cumEnergyVahImport" in data && data.cumEnergyVahImport != undefined) {
                this.cumEnergyVahImport = data.cumEnergyVahImport;
            }
            if ("cumEnergyVahTz1" in data && data.cumEnergyVahTz1 != undefined) {
                this.cumEnergyVahTz1 = data.cumEnergyVahTz1;
            }
            if ("cumEnergyVahTz2" in data && data.cumEnergyVahTz2 != undefined) {
                this.cumEnergyVahTz2 = data.cumEnergyVahTz2;
            }
            if ("cumEnergyVahTz3" in data && data.cumEnergyVahTz3 != undefined) {
                this.cumEnergyVahTz3 = data.cumEnergyVahTz3;
            }
            if ("cumEnergyVahTz4" in data && data.cumEnergyVahTz4 != undefined) {
                this.cumEnergyVahTz4 = data.cumEnergyVahTz4;
            }
            if ("mdw" in data && data.mdw != undefined) {
                this.mdw = data.mdw;
            }
            if ("mdwDateTime" in data && data.mdwDateTime != undefined) {
                this.mdwDateTime = data.mdwDateTime;
            }
            if ("mdva" in data && data.mdva != undefined) {
                this.mdva = data.mdva;
            }
            if ("mdvaDateTime" in data && data.mdvaDateTime != undefined) {
                this.mdvaDateTime = data.mdvaDateTime;
            }
            if ("billingPowerOnDuration" in data && data.billingPowerOnDuration != undefined) {
                this.billingPowerOnDuration = data.billingPowerOnDuration;
            }
            if ("cumEnergyWh" in data && data.cumEnergyWh != undefined) {
                this.cumEnergyWh = data.cumEnergyWh;
            }
            if ("cumEnergyVah" in data && data.cumEnergyVah != undefined) {
                this.cumEnergyVah = data.cumEnergyVah;
            }
        }
    }
    get billingDate() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set billingDate(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get averagePfForBillingPeriod() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set averagePfForBillingPeriod(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get cumEnergyWhImport() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set cumEnergyWhImport(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get cumEnergyWhTz1() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set cumEnergyWhTz1(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get cumEnergyWhTz2() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set cumEnergyWhTz2(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get cumEnergyWhTz3() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set cumEnergyWhTz3(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get cumEnergyWhTz4() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set cumEnergyWhTz4(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get cumEnergyVahImport() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set cumEnergyVahImport(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get cumEnergyVahTz1() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set cumEnergyVahTz1(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get cumEnergyVahTz2() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set cumEnergyVahTz2(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get cumEnergyVahTz3() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set cumEnergyVahTz3(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get cumEnergyVahTz4() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set cumEnergyVahTz4(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get mdw() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set mdw(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get mdwDateTime() {
        return pb_1.Message.getFieldWithDefault(this, 14, "") as string;
    }
    set mdwDateTime(value: string) {
        pb_1.Message.setField(this, 14, value);
    }
    get mdva() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set mdva(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get mdvaDateTime() {
        return pb_1.Message.getFieldWithDefault(this, 16, "") as string;
    }
    set mdvaDateTime(value: string) {
        pb_1.Message.setField(this, 16, value);
    }
    get billingPowerOnDuration() {
        return pb_1.Message.getFieldWithDefault(this, 17, 0) as number;
    }
    set billingPowerOnDuration(value: number) {
        pb_1.Message.setField(this, 17, value);
    }
    get cumEnergyWh() {
        return pb_1.Message.getFieldWithDefault(this, 18, 0) as number;
    }
    set cumEnergyWh(value: number) {
        pb_1.Message.setField(this, 18, value);
    }
    get cumEnergyVah() {
        return pb_1.Message.getFieldWithDefault(this, 19, 0) as number;
    }
    set cumEnergyVah(value: number) {
        pb_1.Message.setField(this, 19, value);
    }
    static fromObject(data: {
        billingDate?: string;
        averagePfForBillingPeriod?: number;
        cumEnergyWhImport?: number;
        cumEnergyWhTz1?: number;
        cumEnergyWhTz2?: number;
        cumEnergyWhTz3?: number;
        cumEnergyWhTz4?: number;
        cumEnergyVahImport?: number;
        cumEnergyVahTz1?: number;
        cumEnergyVahTz2?: number;
        cumEnergyVahTz3?: number;
        cumEnergyVahTz4?: number;
        mdw?: number;
        mdwDateTime?: string;
        mdva?: number;
        mdvaDateTime?: string;
        billingPowerOnDuration?: number;
        cumEnergyWh?: number;
        cumEnergyVah?: number;
    }): BillingDataProfile {
        const message = new BillingDataProfile({});
        if (data.billingDate != null) {
            message.billingDate = data.billingDate;
        }
        if (data.averagePfForBillingPeriod != null) {
            message.averagePfForBillingPeriod = data.averagePfForBillingPeriod;
        }
        if (data.cumEnergyWhImport != null) {
            message.cumEnergyWhImport = data.cumEnergyWhImport;
        }
        if (data.cumEnergyWhTz1 != null) {
            message.cumEnergyWhTz1 = data.cumEnergyWhTz1;
        }
        if (data.cumEnergyWhTz2 != null) {
            message.cumEnergyWhTz2 = data.cumEnergyWhTz2;
        }
        if (data.cumEnergyWhTz3 != null) {
            message.cumEnergyWhTz3 = data.cumEnergyWhTz3;
        }
        if (data.cumEnergyWhTz4 != null) {
            message.cumEnergyWhTz4 = data.cumEnergyWhTz4;
        }
        if (data.cumEnergyVahImport != null) {
            message.cumEnergyVahImport = data.cumEnergyVahImport;
        }
        if (data.cumEnergyVahTz1 != null) {
            message.cumEnergyVahTz1 = data.cumEnergyVahTz1;
        }
        if (data.cumEnergyVahTz2 != null) {
            message.cumEnergyVahTz2 = data.cumEnergyVahTz2;
        }
        if (data.cumEnergyVahTz3 != null) {
            message.cumEnergyVahTz3 = data.cumEnergyVahTz3;
        }
        if (data.cumEnergyVahTz4 != null) {
            message.cumEnergyVahTz4 = data.cumEnergyVahTz4;
        }
        if (data.mdw != null) {
            message.mdw = data.mdw;
        }
        if (data.mdwDateTime != null) {
            message.mdwDateTime = data.mdwDateTime;
        }
        if (data.mdva != null) {
            message.mdva = data.mdva;
        }
        if (data.mdvaDateTime != null) {
            message.mdvaDateTime = data.mdvaDateTime;
        }
        if (data.billingPowerOnDuration != null) {
            message.billingPowerOnDuration = data.billingPowerOnDuration;
        }
        if (data.cumEnergyWh != null) {
            message.cumEnergyWh = data.cumEnergyWh;
        }
        if (data.cumEnergyVah != null) {
            message.cumEnergyVah = data.cumEnergyVah;
        }
        return message;
    }
    toObject() {
        const data: {
            billingDate?: string;
            averagePfForBillingPeriod?: number;
            cumEnergyWhImport?: number;
            cumEnergyWhTz1?: number;
            cumEnergyWhTz2?: number;
            cumEnergyWhTz3?: number;
            cumEnergyWhTz4?: number;
            cumEnergyVahImport?: number;
            cumEnergyVahTz1?: number;
            cumEnergyVahTz2?: number;
            cumEnergyVahTz3?: number;
            cumEnergyVahTz4?: number;
            mdw?: number;
            mdwDateTime?: string;
            mdva?: number;
            mdvaDateTime?: string;
            billingPowerOnDuration?: number;
            cumEnergyWh?: number;
            cumEnergyVah?: number;
        } = {};
        if (this.billingDate != null) {
            data.billingDate = this.billingDate;
        }
        if (this.averagePfForBillingPeriod != null) {
            data.averagePfForBillingPeriod = this.averagePfForBillingPeriod;
        }
        if (this.cumEnergyWhImport != null) {
            data.cumEnergyWhImport = this.cumEnergyWhImport;
        }
        if (this.cumEnergyWhTz1 != null) {
            data.cumEnergyWhTz1 = this.cumEnergyWhTz1;
        }
        if (this.cumEnergyWhTz2 != null) {
            data.cumEnergyWhTz2 = this.cumEnergyWhTz2;
        }
        if (this.cumEnergyWhTz3 != null) {
            data.cumEnergyWhTz3 = this.cumEnergyWhTz3;
        }
        if (this.cumEnergyWhTz4 != null) {
            data.cumEnergyWhTz4 = this.cumEnergyWhTz4;
        }
        if (this.cumEnergyVahImport != null) {
            data.cumEnergyVahImport = this.cumEnergyVahImport;
        }
        if (this.cumEnergyVahTz1 != null) {
            data.cumEnergyVahTz1 = this.cumEnergyVahTz1;
        }
        if (this.cumEnergyVahTz2 != null) {
            data.cumEnergyVahTz2 = this.cumEnergyVahTz2;
        }
        if (this.cumEnergyVahTz3 != null) {
            data.cumEnergyVahTz3 = this.cumEnergyVahTz3;
        }
        if (this.cumEnergyVahTz4 != null) {
            data.cumEnergyVahTz4 = this.cumEnergyVahTz4;
        }
        if (this.mdw != null) {
            data.mdw = this.mdw;
        }
        if (this.mdwDateTime != null) {
            data.mdwDateTime = this.mdwDateTime;
        }
        if (this.mdva != null) {
            data.mdva = this.mdva;
        }
        if (this.mdvaDateTime != null) {
            data.mdvaDateTime = this.mdvaDateTime;
        }
        if (this.billingPowerOnDuration != null) {
            data.billingPowerOnDuration = this.billingPowerOnDuration;
        }
        if (this.cumEnergyWh != null) {
            data.cumEnergyWh = this.cumEnergyWh;
        }
        if (this.cumEnergyVah != null) {
            data.cumEnergyVah = this.cumEnergyVah;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.billingDate.length)
            writer.writeString(1, this.billingDate);
        if (this.averagePfForBillingPeriod != 0)
            writer.writeDouble(2, this.averagePfForBillingPeriod);
        if (this.cumEnergyWhImport != 0)
            writer.writeDouble(3, this.cumEnergyWhImport);
        if (this.cumEnergyWhTz1 != 0)
            writer.writeDouble(4, this.cumEnergyWhTz1);
        if (this.cumEnergyWhTz2 != 0)
            writer.writeDouble(5, this.cumEnergyWhTz2);
        if (this.cumEnergyWhTz3 != 0)
            writer.writeDouble(6, this.cumEnergyWhTz3);
        if (this.cumEnergyWhTz4 != 0)
            writer.writeDouble(7, this.cumEnergyWhTz4);
        if (this.cumEnergyVahImport != 0)
            writer.writeDouble(8, this.cumEnergyVahImport);
        if (this.cumEnergyVahTz1 != 0)
            writer.writeDouble(9, this.cumEnergyVahTz1);
        if (this.cumEnergyVahTz2 != 0)
            writer.writeDouble(10, this.cumEnergyVahTz2);
        if (this.cumEnergyVahTz3 != 0)
            writer.writeDouble(11, this.cumEnergyVahTz3);
        if (this.cumEnergyVahTz4 != 0)
            writer.writeDouble(12, this.cumEnergyVahTz4);
        if (this.mdw != 0)
            writer.writeDouble(13, this.mdw);
        if (this.mdwDateTime.length)
            writer.writeString(14, this.mdwDateTime);
        if (this.mdva != 0)
            writer.writeDouble(15, this.mdva);
        if (this.mdvaDateTime.length)
            writer.writeString(16, this.mdvaDateTime);
        if (this.billingPowerOnDuration != 0)
            writer.writeDouble(17, this.billingPowerOnDuration);
        if (this.cumEnergyWh != 0)
            writer.writeDouble(18, this.cumEnergyWh);
        if (this.cumEnergyVah != 0)
            writer.writeDouble(19, this.cumEnergyVah);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BillingDataProfile {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BillingDataProfile();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.billingDate = reader.readString();
                    break;
                case 2:
                    message.averagePfForBillingPeriod = reader.readDouble();
                    break;
                case 3:
                    message.cumEnergyWhImport = reader.readDouble();
                    break;
                case 4:
                    message.cumEnergyWhTz1 = reader.readDouble();
                    break;
                case 5:
                    message.cumEnergyWhTz2 = reader.readDouble();
                    break;
                case 6:
                    message.cumEnergyWhTz3 = reader.readDouble();
                    break;
                case 7:
                    message.cumEnergyWhTz4 = reader.readDouble();
                    break;
                case 8:
                    message.cumEnergyVahImport = reader.readDouble();
                    break;
                case 9:
                    message.cumEnergyVahTz1 = reader.readDouble();
                    break;
                case 10:
                    message.cumEnergyVahTz2 = reader.readDouble();
                    break;
                case 11:
                    message.cumEnergyVahTz3 = reader.readDouble();
                    break;
                case 12:
                    message.cumEnergyVahTz4 = reader.readDouble();
                    break;
                case 13:
                    message.mdw = reader.readDouble();
                    break;
                case 14:
                    message.mdwDateTime = reader.readString();
                    break;
                case 15:
                    message.mdva = reader.readDouble();
                    break;
                case 16:
                    message.mdvaDateTime = reader.readString();
                    break;
                case 17:
                    message.billingPowerOnDuration = reader.readDouble();
                    break;
                case 18:
                    message.cumEnergyWh = reader.readDouble();
                    break;
                case 19:
                    message.cumEnergyVah = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BillingDataProfile {
        return BillingDataProfile.deserialize(bytes);
    }
}
export class GetInstantaneousProfileRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        meter?: Meter[];
        retries?: number;
        retryDelay?: number;
        connectionTimeout?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("meter" in data && data.meter != undefined) {
                this.meter = data.meter;
            }
            if ("retries" in data && data.retries != undefined) {
                this.retries = data.retries;
            }
            if ("retryDelay" in data && data.retryDelay != undefined) {
                this.retryDelay = data.retryDelay;
            }
            if ("connectionTimeout" in data && data.connectionTimeout != undefined) {
                this.connectionTimeout = data.connectionTimeout;
            }
        }
    }
    get meter() {
        return pb_1.Message.getRepeatedWrapperField(this, Meter, 1) as Meter[];
    }
    set meter(value: Meter[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get retries() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set retries(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get retryDelay() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set retryDelay(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get connectionTimeout() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set connectionTimeout(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        meter?: ReturnType<typeof Meter.prototype.toObject>[];
        retries?: number;
        retryDelay?: number;
        connectionTimeout?: number;
    }): GetInstantaneousProfileRequest {
        const message = new GetInstantaneousProfileRequest({});
        if (data.meter != null) {
            message.meter = data.meter.map(item => Meter.fromObject(item));
        }
        if (data.retries != null) {
            message.retries = data.retries;
        }
        if (data.retryDelay != null) {
            message.retryDelay = data.retryDelay;
        }
        if (data.connectionTimeout != null) {
            message.connectionTimeout = data.connectionTimeout;
        }
        return message;
    }
    toObject() {
        const data: {
            meter?: ReturnType<typeof Meter.prototype.toObject>[];
            retries?: number;
            retryDelay?: number;
            connectionTimeout?: number;
        } = {};
        if (this.meter != null) {
            data.meter = this.meter.map((item: Meter) => item.toObject());
        }
        if (this.retries != null) {
            data.retries = this.retries;
        }
        if (this.retryDelay != null) {
            data.retryDelay = this.retryDelay;
        }
        if (this.connectionTimeout != null) {
            data.connectionTimeout = this.connectionTimeout;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.meter.length)
            writer.writeRepeatedMessage(1, this.meter, (item: Meter) => item.serialize(writer));
        if (this.retries != 0)
            writer.writeInt32(2, this.retries);
        if (this.retryDelay != 0)
            writer.writeInt32(3, this.retryDelay);
        if (this.connectionTimeout != 0)
            writer.writeInt32(4, this.connectionTimeout);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInstantaneousProfileRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInstantaneousProfileRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.meter, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Meter.deserialize(reader), Meter));
                    break;
                case 2:
                    message.retries = reader.readInt32();
                    break;
                case 3:
                    message.retryDelay = reader.readInt32();
                    break;
                case 4:
                    message.connectionTimeout = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetInstantaneousProfileRequest {
        return GetInstantaneousProfileRequest.deserialize(bytes);
    }
}
export class GetInstantaneousProfileResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        profile?: InstantaneousProfile;
        meterIp?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("profile" in data && data.profile != undefined) {
                this.profile = data.profile;
            }
            if ("meterIp" in data && data.meterIp != undefined) {
                this.meterIp = data.meterIp;
            }
        }
    }
    get profile() {
        return pb_1.Message.getWrapperField(this, InstantaneousProfile, 1) as InstantaneousProfile;
    }
    set profile(value: InstantaneousProfile) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_profile() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get meterIp() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set meterIp(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        profile?: ReturnType<typeof InstantaneousProfile.prototype.toObject>;
        meterIp?: string;
    }): GetInstantaneousProfileResponse {
        const message = new GetInstantaneousProfileResponse({});
        if (data.profile != null) {
            message.profile = InstantaneousProfile.fromObject(data.profile);
        }
        if (data.meterIp != null) {
            message.meterIp = data.meterIp;
        }
        return message;
    }
    toObject() {
        const data: {
            profile?: ReturnType<typeof InstantaneousProfile.prototype.toObject>;
            meterIp?: string;
        } = {};
        if (this.profile != null) {
            data.profile = this.profile.toObject();
        }
        if (this.meterIp != null) {
            data.meterIp = this.meterIp;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_profile)
            writer.writeMessage(1, this.profile, () => this.profile.serialize(writer));
        if (this.meterIp.length)
            writer.writeString(2, this.meterIp);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetInstantaneousProfileResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetInstantaneousProfileResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.profile, () => message.profile = InstantaneousProfile.deserialize(reader));
                    break;
                case 2:
                    message.meterIp = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetInstantaneousProfileResponse {
        return GetInstantaneousProfileResponse.deserialize(bytes);
    }
}
export class InstantaneousProfile extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        dateTime?: string;
        voltage?: number;
        phaseCurrent?: number;
        neutralCurrent?: number;
        signedPowerFactor?: number;
        frequency?: number;
        apparentPower?: number;
        activePower?: number;
        cumEnergyWh?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("dateTime" in data && data.dateTime != undefined) {
                this.dateTime = data.dateTime;
            }
            if ("voltage" in data && data.voltage != undefined) {
                this.voltage = data.voltage;
            }
            if ("phaseCurrent" in data && data.phaseCurrent != undefined) {
                this.phaseCurrent = data.phaseCurrent;
            }
            if ("neutralCurrent" in data && data.neutralCurrent != undefined) {
                this.neutralCurrent = data.neutralCurrent;
            }
            if ("signedPowerFactor" in data && data.signedPowerFactor != undefined) {
                this.signedPowerFactor = data.signedPowerFactor;
            }
            if ("frequency" in data && data.frequency != undefined) {
                this.frequency = data.frequency;
            }
            if ("apparentPower" in data && data.apparentPower != undefined) {
                this.apparentPower = data.apparentPower;
            }
            if ("activePower" in data && data.activePower != undefined) {
                this.activePower = data.activePower;
            }
            if ("cumEnergyWh" in data && data.cumEnergyWh != undefined) {
                this.cumEnergyWh = data.cumEnergyWh;
            }
        }
    }
    get dateTime() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set dateTime(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get voltage() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set voltage(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get phaseCurrent() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set phaseCurrent(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get neutralCurrent() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set neutralCurrent(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get signedPowerFactor() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set signedPowerFactor(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get frequency() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set frequency(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get apparentPower() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set apparentPower(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get activePower() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set activePower(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get cumEnergyWh() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set cumEnergyWh(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
        dateTime?: string;
        voltage?: number;
        phaseCurrent?: number;
        neutralCurrent?: number;
        signedPowerFactor?: number;
        frequency?: number;
        apparentPower?: number;
        activePower?: number;
        cumEnergyWh?: number;
    }): InstantaneousProfile {
        const message = new InstantaneousProfile({});
        if (data.dateTime != null) {
            message.dateTime = data.dateTime;
        }
        if (data.voltage != null) {
            message.voltage = data.voltage;
        }
        if (data.phaseCurrent != null) {
            message.phaseCurrent = data.phaseCurrent;
        }
        if (data.neutralCurrent != null) {
            message.neutralCurrent = data.neutralCurrent;
        }
        if (data.signedPowerFactor != null) {
            message.signedPowerFactor = data.signedPowerFactor;
        }
        if (data.frequency != null) {
            message.frequency = data.frequency;
        }
        if (data.apparentPower != null) {
            message.apparentPower = data.apparentPower;
        }
        if (data.activePower != null) {
            message.activePower = data.activePower;
        }
        if (data.cumEnergyWh != null) {
            message.cumEnergyWh = data.cumEnergyWh;
        }
        return message;
    }
    toObject() {
        const data: {
            dateTime?: string;
            voltage?: number;
            phaseCurrent?: number;
            neutralCurrent?: number;
            signedPowerFactor?: number;
            frequency?: number;
            apparentPower?: number;
            activePower?: number;
            cumEnergyWh?: number;
        } = {};
        if (this.dateTime != null) {
            data.dateTime = this.dateTime;
        }
        if (this.voltage != null) {
            data.voltage = this.voltage;
        }
        if (this.phaseCurrent != null) {
            data.phaseCurrent = this.phaseCurrent;
        }
        if (this.neutralCurrent != null) {
            data.neutralCurrent = this.neutralCurrent;
        }
        if (this.signedPowerFactor != null) {
            data.signedPowerFactor = this.signedPowerFactor;
        }
        if (this.frequency != null) {
            data.frequency = this.frequency;
        }
        if (this.apparentPower != null) {
            data.apparentPower = this.apparentPower;
        }
        if (this.activePower != null) {
            data.activePower = this.activePower;
        }
        if (this.cumEnergyWh != null) {
            data.cumEnergyWh = this.cumEnergyWh;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.dateTime.length)
            writer.writeString(1, this.dateTime);
        if (this.voltage != 0)
            writer.writeDouble(2, this.voltage);
        if (this.phaseCurrent != 0)
            writer.writeDouble(3, this.phaseCurrent);
        if (this.neutralCurrent != 0)
            writer.writeDouble(4, this.neutralCurrent);
        if (this.signedPowerFactor != 0)
            writer.writeDouble(5, this.signedPowerFactor);
        if (this.frequency != 0)
            writer.writeDouble(6, this.frequency);
        if (this.apparentPower != 0)
            writer.writeDouble(7, this.apparentPower);
        if (this.activePower != 0)
            writer.writeDouble(8, this.activePower);
        if (this.cumEnergyWh != 0)
            writer.writeDouble(9, this.cumEnergyWh);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InstantaneousProfile {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InstantaneousProfile();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.dateTime = reader.readString();
                    break;
                case 2:
                    message.voltage = reader.readDouble();
                    break;
                case 3:
                    message.phaseCurrent = reader.readDouble();
                    break;
                case 4:
                    message.neutralCurrent = reader.readDouble();
                    break;
                case 5:
                    message.signedPowerFactor = reader.readDouble();
                    break;
                case 6:
                    message.frequency = reader.readDouble();
                    break;
                case 7:
                    message.apparentPower = reader.readDouble();
                    break;
                case 8:
                    message.activePower = reader.readDouble();
                    break;
                case 9:
                    message.cumEnergyWh = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InstantaneousProfile {
        return InstantaneousProfile.deserialize(bytes);
    }
}
// Server-side service class removed for client-side compatibility
export class DLMSProcessorClient {
    private _address: string;
    private _client: grpc_web_1.GrpcWebClientBase;
    constructor(address: string, credentials?: Object, options?: grpc_web_1.GrpcWebClientBaseOptions) {
        if (!options)
            options = {};
        options.format = options.format || "text";
        this._address = address;
        this._client = new grpc_web_1.GrpcWebClientBase(options);
    }
    private static GetOBIS = new grpc_web_1.MethodDescriptor<GetOBISRequest, GetOBISResponse>("/dlmsprocessor.DLMSProcessor/GetOBIS", grpc_web_1.MethodType.SERVER_STREAMING, GetOBISRequest, GetOBISResponse, (message: GetOBISRequest) => message.serialize(), GetOBISResponse.deserialize);
    GetOBIS(message: GetOBISRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.serverStreaming(this._address + "/dlmsprocessor.DLMSProcessor/GetOBIS", message, metadata || {}, DLMSProcessorClient.GetOBIS);
    }
    private static GetBlockLoadProfile = new grpc_web_1.MethodDescriptor<GetBlockLoadProfileRequest, GetBlockLoadProfileResponse>("/dlmsprocessor.DLMSProcessor/GetBlockLoadProfile", grpc_web_1.MethodType.SERVER_STREAMING, GetBlockLoadProfileRequest, GetBlockLoadProfileResponse, (message: GetBlockLoadProfileRequest) => message.serialize(), GetBlockLoadProfileResponse.deserialize);
    GetBlockLoadProfile(message: GetBlockLoadProfileRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.serverStreaming(this._address + "/dlmsprocessor.DLMSProcessor/GetBlockLoadProfile", message, metadata || {}, DLMSProcessorClient.GetBlockLoadProfile);
    }
    private static GetDailyLoadProfile = new grpc_web_1.MethodDescriptor<GetDailyLoadProfileRequest, GetDailyLoadProfileResponse>("/dlmsprocessor.DLMSProcessor/GetDailyLoadProfile", grpc_web_1.MethodType.SERVER_STREAMING, GetDailyLoadProfileRequest, GetDailyLoadProfileResponse, (message: GetDailyLoadProfileRequest) => message.serialize(), GetDailyLoadProfileResponse.deserialize);
    GetDailyLoadProfile(message: GetDailyLoadProfileRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.serverStreaming(this._address + "/dlmsprocessor.DLMSProcessor/GetDailyLoadProfile", message, metadata || {}, DLMSProcessorClient.GetDailyLoadProfile);
    }
    private static GetBillingDataProfile = new grpc_web_1.MethodDescriptor<GetBillingDataProfileRequest, GetBillingDataProfileResponse>("/dlmsprocessor.DLMSProcessor/GetBillingDataProfile", grpc_web_1.MethodType.SERVER_STREAMING, GetBillingDataProfileRequest, GetBillingDataProfileResponse, (message: GetBillingDataProfileRequest) => message.serialize(), GetBillingDataProfileResponse.deserialize);
    GetBillingDataProfile(message: GetBillingDataProfileRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.serverStreaming(this._address + "/dlmsprocessor.DLMSProcessor/GetBillingDataProfile", message, metadata || {}, DLMSProcessorClient.GetBillingDataProfile);
    }
    private static GetInstantaneousProfile = new grpc_web_1.MethodDescriptor<GetInstantaneousProfileRequest, GetInstantaneousProfileResponse>("/dlmsprocessor.DLMSProcessor/GetInstantaneousProfile", grpc_web_1.MethodType.SERVER_STREAMING, GetInstantaneousProfileRequest, GetInstantaneousProfileResponse, (message: GetInstantaneousProfileRequest) => message.serialize(), GetInstantaneousProfileResponse.deserialize);
    GetInstantaneousProfile(message: GetInstantaneousProfileRequest, metadata: grpc_web_1.Metadata | null) {
        return this._client.serverStreaming(this._address + "/dlmsprocessor.DLMSProcessor/GetInstantaneousProfile", message, metadata || {}, DLMSProcessorClient.GetInstantaneousProfile);
    }
}
